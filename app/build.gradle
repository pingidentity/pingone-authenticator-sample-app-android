apply plugin: 'com.android.application'
/*
 * The Google services plugin for Gradle loads the google-services.json file you have downloaded.
 */
apply plugin: 'com.google.gms.google-services'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        /*
         * Every Android app has a unique application ID that looks like a Java package name,
         * such as com.example.myapp. This ID uniquely identifies your app on the device and
         * in Google Play Store. If you want to upload a new version of your app, the application ID
         * (and the certificate you sign it with) must be the same as the original APK
         * if you change the application ID, Google Play Store treats the APK as a completely
         * different app. So once you publish your app, you should never change the application ID.
         */
        applicationId "com.pingidentity.authenticatorsampleapp"
        minSdkVersion 26
        targetSdkVersion 31
        /*
         * Next value is a positive integer so that other apps can programmatically evaluate it,
         * for example to check an upgrade or downgrade relationship. You can set the value to any
         * positive integer you want, however you should make sure that each successive release of
         * your app uses a greater value. You cannot upload an APK to the Play Store with a
         * a value you have already used for a previous version.
         * Warning: The greatest value Google Play allows for this field is 2100000000.
         * For more info visit: https://developer.android.com/studio/publish/versioning#appversioning
         */
        versionCode = 12
        /*
         * The next variable is a string so that you can describe the app version as a
         * <major>.<minor>.<point> string, or as any other type of absolute or relative
         * version identifier. The value has no purpose other than to be displayed to users.
         */
        versionName "1.4.0"

        /*
         * This is the variable that is injected into build config, while building the application.
         * If you want to use the Android Device Verification feature you should assign a value to
         * this variable in the gradle.properties file. Access this value from the application in the
         * following way:
         * String safetyNetApiKey = BuildConfig.API_KEY;
         */
        buildConfigField("String", "API_KEY", "${safetynet_api_key}")


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])

    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0'

    //Import the Firebase BoM (Bill of Materials)
    implementation platform('com.google.firebase:firebase-bom:26.3.0')
    //FireCloud Messaging Services
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation "com.google.android.gms:play-services-safetynet:18.0.0"

    /*
     * ML Kit is a mobile SDK that brings Google's on-device machine learning expertise to a device
     * ML Kit's APIs all run on-device, allowing for real-time use cases where you want to process
     * a live camera stream. This also means that the functionality is available offline.
     */
    implementation 'com.google.mlkit:barcode-scanning:17.0.0'

    /*
     * The jose.4.j library is an open source (Apache 2.0) implementation of JWT and the JOSE
     * specification suite
     */
    implementation 'org.bitbucket.b_c:jose4j:0.7.1'

    //Google's gSon library to build and parse JSON format
    implementation 'com.google.code.gson:gson:2.8.6'

    /*
     * The library that provides ability to use Certificate Transparency
     * https://www.certificate-transparency.org
     */
    implementation("com.appmattus.certificatetransparency:certificatetransparency-android:1.0.0")
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    implementation 'androidx.appcompat:appcompat:1.4.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"


    /*
     * To display a system prompt that requests the user to authenticate
     * using biometric credentials, use the Biometric library.
     */
    implementation 'androidx.biometric:biometric:1.1.0'



    // Use the most recent version of CameraX
    def camerax_version = '1.0.2'
    // CameraX core library using camera2 implementation
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha30"

    //implementation 'androidx.legacy:legacy-support-v4:1.0.0'

}
