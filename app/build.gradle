apply plugin: 'com.android.application'

/*
 * The Google services plugin for Gradle loads the google-services.json file you have downloaded.
 */
apply plugin: 'com.google.gms.google-services'
/*
 * The AndroidX plugin that generates simple object and builder classes for type-safe navigation
 * and access to any associated arguments. Safe Args is strongly recommended for navigating and
 * passing data, because it ensures type-safety.
 */
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdk 34

    /*
     * The namespace is initially set to the package name you choose when you create your project.
     * While building your app into the final application package (APK), the Android build tools
     * use the namespace as the namespace for your app's generated R class, which is used to access
     * your app resources.
     * See more at https://developer.android.com/build/configure-app-module#set-namespace
     */
    namespace 'com.pingidentity.authenticatorsampleapp'

    defaultConfig {
        /*
         * Every Android app has a unique application ID that looks like a Java package name,
         * such as com.example.myapp. This ID uniquely identifies your app on the device and
         * in Google Play Store. If you want to upload a new version of your app, the application ID
         * (and the certificate you sign it with) must be the same as the original APK
         * if you change the application ID, Google Play Store treats the APK as a completely
         * different app. So once you publish your app, you should never change the application ID.
         */
        applicationId "com.pingidentity.authenticatorsampleapp"
        minSdkVersion 26
        targetSdkVersion 34
        /*
         * Next value is a positive integer so that other apps can programmatically evaluate it,
         * for example to check an upgrade or downgrade relationship. You can set the value to any
         * positive integer you want, however you should make sure that each successive release of
         * your app uses a greater value. You cannot upload an APK to the Play Store with a
         * a value you have already used for a previous version.
         * Warning: The greatest value Google Play allows for this field is 2100000000.
         * For more info visit: https://developer.android.com/studio/publish/versioning#appversioning
         */
        versionCode = 23
        /*
         * The next variable is a string so that you can describe the app version as a
         * <major>.<minor>.<point> string, or as any other type of absolute or relative
         * version identifier. The value has no purpose other than to be displayed to users.
         */
        versionName "1.8.0"

        /*
         * This is the variable that is injected into build config, while building the application.
         * If you want to use the Google Play Integrity APIs you should assign a value to
         * this variable in the gradle.properties file. Access this value from the application in the
         * following way:
         * String googleCloudProjectNumber = BuildConfig.GOOGLE_CLOUD_PROJECT_NUMBER;
         */
        buildConfigField("String", "GOOGLE_CLOUD_PROJECT_NUMBER", "${google_cloud_project_number}")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

}
dependencies {
    /*
     * Import the PingOne for Customers Android SDK. Get the latest version from
     * https://search.maven.org/search?q=g:com.pingidentity.pingonemfa
     */
    implementation 'com.pingidentity.pingonemfa:android-sdk:1.11.0'

    /*
     * Import the Firebase BoM (Bill of Materials).
     * A BOM is a special kind of POM file that is used to centralize the version information of
     * multiple }
dependencies. It doesn't contain any actual code, but it specifies the versions of
     * }
dependencies that are known to work together.
     * The BOM helps to ensure that the versions of }
dependencies you're using are known to be
     * compatible with each other, reducing the risk of version conflicts.
     */
    implementation platform('com.google.firebase:firebase-bom:32.2.3')
    //FireCloud Messaging Services
    implementation 'com.google.firebase:firebase-messaging'

    /*
     * ML Kit is a mobile SDK that brings Google's on-device machine learning expertise to a device
     * ML Kit's APIs all run on-device, allowing for real-time use cases where you want to process
     * a live camera stream. This also means that the functionality is available offline.
     */
    implementation 'com.google.mlkit:barcode-scanning:17.2.0'

    //Google's gSon library to build and parse JSON format
    implementation 'com.google.code.gson:gson:2.10.1'
    /*
     * Play Integrity API library
     */
    implementation 'com.google.android.play:integrity:1.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.7.3'
    implementation 'androidx.navigation:navigation-ui:2.7.3'
    implementation "androidx.drawerlayout:drawerlayout:1.2.0"

    /*
     * To display a system prompt that requests the user to authenticate
     * using biometric credentials, use the Biometric library.
     */
    implementation 'androidx.biometric:biometric:1.1.0'

    // Use the most recent version of CameraX
    def camerax_version = '1.2.3'
    // CameraX core library using camera2 implementation
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha30"

}
